"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.LruMap = void 0;
const SizedMap_1 = require("./SizedMap");
class LruMap extends SizedMap_1.SizedMap {
    constructor(limit) {
        super(limit);
    }
    has(key) {
        const node = this.map.get(key);
        if (node) {
            this.moveToTop(node);
            return true;
        }
        return false;
    }
    get(key, _default) {
        const node = this.map.get(key);
        if (node) {
            this.moveToTop(node);
            return node.value;
        }
        return _default;
    }
    set(key, value) {
        let node = this.map.get(key);
        if (node) {
            node.value = value;
            this.moveToTop(node);
        }
        else {
            node = {
                key: key,
                value: value,
            };
            if (this.isFull()) {
                this.delete(this.end.key);
            }
            this.moveToTop(node);
            this.map.set(key, node);
        }
        return this;
    }
    delete(key) {
        const node = this.map.get(key);
        if (node) {
            this.removeNode(node);
            return super.delete(key);
        }
        return false;
    }
    clear() {
        this.start = this.end = undefined;
        super.clear();
    }
    moveToTop(node) {
        node.right = this.start;
        node.left = undefined;
        if (this.start) {
            this.start.left = node;
        }
        this.start = node;
        if (!this.end) {
            this.end = this.start;
        }
    }
    removeNode(node) {
        if (node.left) {
            node.left.right = node.right;
        }
        else {
            this.start = node.right;
        }
        if (node.right) {
            node.right.left = node.left;
        }
        else {
            this.end = node.left;
        }
    }
}
exports.LruMap = LruMap;

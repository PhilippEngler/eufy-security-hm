#!/bin/sh

ADDONNAME=eufySecurity
CONFIG_DIR=/usr/local/etc/config
ADDON_DIR=/usr/local/addons/${ADDONNAME}
SETUP_DIR=$(pwd)
RCD_DIR=${CONFIG_DIR}/rc.d
WWW_DIR=${CONFIG_DIR}/addons/www/${ADDONNAME}
INSTALL_LOGFILE=/var/tmp/install_eufySecurity.log

echo $(date +"%Y-%m-%d %H:%M:%S.%3N") Start installing $ADDONNAME >> $INSTALL_LOGFILE

# check for unsupported platforms (author: jens-maus)
if grep -qim1 busmatic /www/api/methods/ccu/downloadFirmware.tcl; then
  echo $(date +"%Y-%m-%d %H:%M:%S.%3N") Unsupported operating system found. Aborting. >> $INSTALL_LOGFILE
  exit 13
fi

# check for unsupported CCU1 and CCU2
if [ "$1" = "" ]; then
  echo $(date +"%Y-%m-%d %H:%M:%S.%3N") Unsupported hardware found \(CCU1\). Aborting. >> $INSTALL_LOGFILE
  exit 14
elif [ "$1" = "CCU2" ]; then
  echo $(date +"%Y-%m-%d %H:%M:%S.%3N") Unsupported hardware found \(CCU2\). Aborting. >> $INSTALL_LOGFILE
  exit 14
fi

# mount /usr/local if not already mounted
mount | grep /usr/local 2>&1 >/dev/null
if [ $? -eq 1 ]; then
  mount /usr/local
fi

# if the service is available, stop it (mainly for raspberrymatic)
if [ -e ${RCD_DIR}/eufySecurity ]; then
  echo $(date +"%Y-%m-%d %H:%M:%S.%3N") $ADDONNAME installed. Stopping service... >> $INSTALL_LOGFILE
  ${RCD_DIR}/eufySecurity stop
fi

# extract the version information of the install package
PACKAGE_VERSION=$(cat VERSION)
PACKAGE_VERSION_MAIN=$(echo $PACKAGE_VERSION | cut -d "." -f 1)
PACKAGE_VERSION_MINOR=$(echo $PACKAGE_VERSION | cut -d "." -f 2)
PACKAGE_VERSION_BUILD=$(echo $PACKAGE_VERSION | cut -d "." -f 3)
echo $(date +"%Y-%m-%d %H:%M:%S.%3N") Version to install: $PACKAGE_VERSION >> $INSTALL_LOGFILE

# handle update of addon
if [ -e ${ADDON_DIR}/eufySecurityApi ]; then
  # an version is installed, so determine the version
  if [ -e ${ADDON_DIR}/VERSION ]; then
    CURRENT_VERSION=$(cat ${ADDON_DIR}/VERSION)
  else
    CURRENT_VERSION=0.0.0
  fi
  CURRENT_VERSION_MAIN=$(echo $CURRENT_VERSION | cut -d "." -f 1)
  CURRENT_VERSION_MINOR=$(echo $CURRENT_VERSION | cut -d "." -f 2)
  CURRENT_VERSION_BUILD=$(echo $CURRENT_VERSION | cut -d "." -f 3)
  echo $(date +"%Y-%m-%d %H:%M:%S.%3N") Version currently installed: $CURRENT_VERSION >> $INSTALL_LOGFILE
  # remove unused files from versions lower than 3.0.0
  if [ CURRENT_VERSION_MAIN -lt 3 ]; then
    echo $(date +"%Y-%m-%d %H:%M:%S.%3N") Installed version lower than 3.0.0 >> $INSTALL_LOGFILE
    # remove the complete node_modules folder in case of updating from versions below 3.0.0
    if [ -e ${ADDON_DIR}/node_modules ]; then
      rm -r ${ADDON_DIR}/node_modules
    fi
    if [ -e ${ADDON_DIR}/eufySecurityApi/http/http.service.js ]; then
      rm -f ${ADDON_DIR}/eufySecurityApi/http/http.service.js
    fi
    if [ -e ${ADDON_DIR}/eufySecurityApi/http/http.utils.js ]; then
      rm -f ${ADDON_DIR}/eufySecurityApi/http/http.utils.js
    fi
    if [ -e ${ADDON_DIR}/eufySecurityApi/http/http-request.models.js ]; then
      rm -f ${ADDON_DIR}/eufySecurityApi/http/http-request.models.js
    fi
    if [ -e ${ADDON_DIR}/eufySecurityApi/http/http-response.models.js ]; then
      rm -f ${ADDON_DIR}/eufySecurityApi/http/http-response.models.js
    fi
    if [ -e ${ADDON_DIR}/eufySecurityApi/p2p/cloud-lookup.service.js ]; then
      rm -f ${ADDON_DIR}/eufySecurityApi/p2p/cloud-lookup.service.js
    fi
    if [ -e ${ADDON_DIR}/eufySecurityApi/p2p/command.model.js ]; then
      rm -f ${ADDON_DIR}/eufySecurityApi/p2p/command.model.js
    fi
    if [ -e ${ADDON_DIR}/eufySecurityApi/p2p/device-client.service.js ]; then
      rm -f ${ADDON_DIR}/eufySecurityApi/p2p/device-client.service.js
    fi
    if [ -e ${ADDON_DIR}/eufySecurityApi/p2p/ip.utils.js ]; then
      rm -f ${ADDON_DIR}/eufySecurityApi/p2p/ip.utils.js
    fi
    if [ -e ${ADDON_DIR}/eufySecurityApi/p2p/local-lookup.service.js ]; then
      rm -f ${ADDON_DIR}/eufySecurityApi/p2p/local-lookup.service.js
    fi
    if [ -e ${ADDON_DIR}/eufySecurityApi/p2p/message.utils.js ]; then
      rm -f ${ADDON_DIR}/eufySecurityApi/p2p/message.utils.js
    fi
    if [ -e ${ADDON_DIR}/eufySecurityApi/p2p/payload.utils.js ]; then
      rm -f ${ADDON_DIR}/eufySecurityApi/p2p/payload.utils.js
    fi
    if [ -e ${ADDON_DIR}/eufySecurityApi/push/fid.model.js ]; then
      rm -f ${ADDON_DIR}/eufySecurityApi/push/fid.model.js
    fi
    if [ -e ${ADDON_DIR}/eufySecurityApi/push/push.model.js ]; then
      rm -f ${ADDON_DIR}/eufySecurityApi/push/push.model.js
    fi
    if [ -e ${ADDON_DIR}/eufySecurityApi/push/push.utils.js ]; then
      rm -f ${ADDON_DIR}/eufySecurityApi/push/push.utils.js
    fi
    if [ -e ${ADDON_DIR}/eufySecurityApi/push/push-client.service.js ]; then
      rm -f ${ADDON_DIR}/eufySecurityApi/push/push-client.service.js
    fi
    if [ -e ${ADDON_DIR}/eufySecurityApi/push/push-client-parser.service.js ]; then
      rm -f ${ADDON_DIR}/eufySecurityApi/push/push-client-parser.service.js
    fi
    if [ -e ${ADDON_DIR}/eufySecurityApi/push/push-register.service.js ]; then
      rm -f ${ADDON_DIR}/eufySecurityApi/push/push-register.service.js
    fi
    if [ -e ${ADDON_DIR}/www/assets/dist/css/bootstrap.css ]; then
      rm -f ${ADDON_DIR}/www/assets/dist/css/bootstrap.css
    fi
    if [ -e ${ADDON_DIR}/www/assets/dist/css/bootstrap.css.map ]; then
      rm -f ${ADDON_DIR}/www/assets/dist/css/bootstrap.css.map
    fi
    if [ -e ${ADDON_DIR}/www/assets/dist/css/bootstrap.rtl.css ]; then
      rm -f ${ADDON_DIR}/www/assets/dist/css/bootstrap.rtl.css
    fi
    if [ -e ${ADDON_DIR}/www/assets/dist/css/bootstrap.rtl.css.map ]; then
      rm -f ${ADDON_DIR}/www/assets/dist/css/bootstrap.rtl.css.map
    fi
    if [ -e ${ADDON_DIR}/www/assets/dist/css/bootstrap.rtl.min.css ]; then
      rm -f ${ADDON_DIR}/www/assets/dist/css/bootstrap.rtl.min.css
    fi
    if [ -e ${ADDON_DIR}/www/assets/dist/css/bootstrap.rtl.min.css.map ]; then
      rm -f ${ADDON_DIR}/www/assets/dist/css/bootstrap.rtl.min.css.map
    fi
    if [ -e ${ADDON_DIR}/www/assets/dist/css/bootstrap-grid.css ]; then
      rm -f ${ADDON_DIR}/www/assets/dist/css/bootstrap-grid.css
    fi
    if [ -e ${ADDON_DIR}/www/assets/dist/css/bootstrap-grid.css.map ]; then
      rm -f ${ADDON_DIR}/www/assets/dist/css/bootstrap-grid.css.map
    fi
    if [ -e ${ADDON_DIR}/www/assets/dist/css/bootstrap-grid.min.css ]; then
      rm -f ${ADDON_DIR}/www/assets/dist/css/bootstrap-grid.min.css
    fi
    if [ -e ${ADDON_DIR}/www/assets/dist/css/bootstrap-grid.min.css.map ]; then
      rm -f ${ADDON_DIR}/www/assets/dist/css/bootstrap-grid.min.css.map
    fi
    if [ -e ${ADDON_DIR}/www/assets/dist/css/bootstrap-grid.rtl.css ]; then
      rm -f ${ADDON_DIR}/www/assets/dist/css/bootstrap-grid.rtl.css
    fi
    if [ -e ${ADDON_DIR}/www/assets/dist/css/bootstrap-grid.rtl.css.map ]; then
      rm -f ${ADDON_DIR}/www/assets/dist/css/bootstrap-grid.rtl.css.map
    fi
    if [ -e ${ADDON_DIR}/www/assets/dist/css/bootstrap-grid.rtl.min.css ]; then
      rm -f ${ADDON_DIR}/www/assets/dist/css/bootstrap-grid.rtl.min.css
    fi
    if [ -e ${ADDON_DIR}/www/assets/dist/css/bootstrap-grid.rtl.min.css.map ]; then
      rm -f ${ADDON_DIR}/www/assets/dist/css/bootstrap-grid.rtl.min.css.map
    fi
    if [ -e ${ADDON_DIR}/www/assets/dist/css/bootstrap-reboot.css ]; then
      rm -f ${ADDON_DIR}/www/assets/dist/css/bootstrap-reboot.css
    fi
    if [ -e ${ADDON_DIR}/www/assets/dist/css/bootstrap-reboot.css.map ]; then
      rm -f ${ADDON_DIR}/www/assets/dist/css/bootstrap-reboot.css.map
    fi
    if [ -e ${ADDON_DIR}/www/assets/dist/css/bootstrap-reboot.min.css ]; then
      rm -f ${ADDON_DIR}/www/assets/dist/css/bootstrap-reboot.min.css
    fi
    if [ -e ${ADDON_DIR}/www/assets/dist/css/bootstrap-reboot.min.css.map ]; then
      rm -f ${ADDON_DIR}/www/assets/dist/css/bootstrap-reboot.min.css.map
    fi
    if [ -e ${ADDON_DIR}/www/assets/dist/css/bootstrap-reboot.rtl.css ]; then
      rm -f ${ADDON_DIR}/www/assets/dist/css/bootstrap-reboot.rtl.css
    fi
    if [ -e ${ADDON_DIR}/www/assets/dist/css/bootstrap-reboot.rtl.css.map ]; then
      rm -f ${ADDON_DIR}/www/assets/dist/css/bootstrap-reboot.rtl.css.map
    fi
    if [ -e ${ADDON_DIR}/www/assets/dist/css/bootstrap-reboot.rtl.min.css ]; then
      rm -f ${ADDON_DIR}/www/assets/dist/css/bootstrap-reboot.rtl.min.css
    fi
    if [ -e ${ADDON_DIR}/www/assets/dist/css/bootstrap-reboot.rtl.min.css.map ]; then
      rm -f ${ADDON_DIR}/www/assets/dist/css/bootstrap-reboot.rtl.min.css.map
    fi
    if [ -e ${ADDON_DIR}/www/assets/dist/css/bootstrap-utilities.css ]; then
      rm -f ${ADDON_DIR}/www/assets/dist/css/bootstrap-utilities.css
    fi
    if [ -e ${ADDON_DIR}/www/assets/dist/css/bootstrap-utilities.css.map ]; then
      rm -f ${ADDON_DIR}/www/assets/dist/css/bootstrap-utilities.css.map
    fi
    if [ -e ${ADDON_DIR}/www/assets/dist/css/bootstrap-utilities.min.css ]; then
      rm -f ${ADDON_DIR}/www/assets/dist/css/bootstrap-utilities.min.css
    fi
    if [ -e ${ADDON_DIR}/www/assets/dist/css/bootstrap-utilities.min.css.map ]; then
      rm -f ${ADDON_DIR}/www/assets/dist/css/bootstrap-utilities.min.css.map
    fi
    if [ -e ${ADDON_DIR}/www/assets/dist/css/bootstrap-utilities.rtl.css ]; then
      rm -f ${ADDON_DIR}/www/assets/dist/css/bootstrap-utilities.rtl.css
    fi
    if [ -e ${ADDON_DIR}/www/assets/dist/css/bootstrap-utilities.rtl.css.map ]; then
      rm -f ${ADDON_DIR}/www/assets/dist/css/bootstrap-utilities.rtl.css.map
    fi
    if [ -e ${ADDON_DIR}/www/assets/dist/css/bootstrap-utilities.rtl.min.css ]; then
      rm -f ${ADDON_DIR}/www/assets/dist/css/bootstrap-utilities.rtl.min.css
    fi
    if [ -e ${ADDON_DIR}/www/assets/dist/css/bootstrap-utilities.rtl.min.css.map ]; then
      rm -f ${ADDON_DIR}/www/assets/dist/css/bootstrap-utilities.rtl.min.css.map
    fi
    if [ -e ${ADDON_DIR}/www/assets/dist/css/footer.css ]; then
      rm -f ${ADDON_DIR}/www/assets/dist/css/footer.css
    fi
    if [ -e ${ADDON_DIR}/www/assets/dist/css/navbar-top-fixed.css ]; then
      rm -f ${ADDON_DIR}/www/assets/dist/css/navbar-top-fixed.css
    fi
    if [ -e ${ADDON_DIR}/www/assets/dist/js/bootstrap.bundle.js ]; then
      rm -f ${ADDON_DIR}/www/assets/dist/js/bootstrap.bundle.js
    fi
    if [ -e ${ADDON_DIR}/www/assets/dist/js/bootstrap.bundle.js.map ]; then
      rm -f ${ADDON_DIR}/www/assets/dist/js/bootstrap.bundle.js.map
    fi
    if [ -e ${ADDON_DIR}/www/assets/dist/js/bootstrap.bundle.min.js ]; then
      rm -f ${ADDON_DIR}/www/assets/dist/js/bootstrap.bundle.min.js
    fi
    if [ -e ${ADDON_DIR}/www/assets/dist/js/bootstrap.bundle.min.js.map ]; then
      rm -f ${ADDON_DIR}/www/assets/dist/js/bootstrap.bundle.min.js.map
    fi
    if [ -e ${ADDON_DIR}/www/assets/dist/js/bootstrap.esm.js ]; then
      rm -f ${ADDON_DIR}/www/assets/dist/js/bootstrap.esm.js
    fi
    if [ -e ${ADDON_DIR}/www/assets/dist/js/bootstrap.esm.js.map ]; then
      rm -f ${ADDON_DIR}/www/assets/dist/js/bootstrap.esm.js.map
    fi
    if [ -e ${ADDON_DIR}/www/assets/dist/js/bootstrap.esm.min.js ]; then
      rm -f ${ADDON_DIR}/www/assets/dist/js/bootstrap.esm.min.js
    fi
    if [ -e ${ADDON_DIR}/www/assets/dist/js/bootstrap.esm.min.js.map ]; then
      rm -f ${ADDON_DIR}/www/assets/dist/js/bootstrap.esm.min.js.map
    fi
    if [ -e ${ADDON_DIR}/www/assets/dist/js/bootstrap.js ]; then
      rm -f ${ADDON_DIR}/www/assets/dist/js/bootstrap.js
    fi
    if [ -e ${ADDON_DIR}/www/assets/dist/js/bootstrap.js.map ]; then
      rm -f ${ADDON_DIR}/www/assets/dist/js/bootstrap.js.map
    fi
    if [ -e ${ADDON_DIR}/www/assets/dist/js/jquery-3.5.1.slim.min.js ]; then
      rm -f ${ADDON_DIR}/www/assets/dist/js/jquery-3.5.1.slim.min.js
    fi
    if [ -e ${ADDON_DIR}/www/assets/dist/js/popper.min.js ]; then
      rm -f ${ADDON_DIR}/www/assets/dist/js/popper.min.js
    fi
    if [ -e ${ADDON_DIR}/www/assets/dist/js/popper.min.js.map ]; then
      rm -f ${ADDON_DIR}/www/assets/dist/js/popper.min.js.map
    fi
    if [ -e ${ADDON_DIR}/eufySecurityApi/bases.js ]; then
      rm -f ${ADDON_DIR}/eufySecurityApi/bases.js
    fi
    if [ -e ${ADDON_DIR}/eufySecurityApi/eufysecurity.js ]; then
      rm -f ${ADDON_DIR}/eufySecurityApi/eufysecurity.js
    fi
    if [ -e ${ADDON_DIR}/www/assets/devices ]; then
      rm -r ${ADDON_DIR}/www/assets/devices
    fi
    if [ -e ${ADDON_DIR}/www/apiPorts.txt ]; then
      rm -f ${ADDON_DIR}/www/apiPorts.txt
    fi
  else
    echo $(date +"%Y-%m-%d %H:%M:%S.%3N") Installed version is 3.0.0 or newer >> $INSTALL_LOGFILE
  fi
  # remove unused api files from versions lower than 3.1.1
  if [ $CURRENT_VERSION_MAIN -lt 3 ] || ([ $CURRENT_VERSION_MAIN -eq 3 ] && [ $CURRENT_VERSION_MINOR -lt 1 ]) || ([ $CURRENT_VERSION_MAIN -eq 3 ] && [ $CURRENT_VERSION_MINOR -eq 1 ] && [ $CURRENT_VERSION_BUILD -lt 1 ]); then
    echo $(date +"%Y-%m-%d %H:%M:%S.%3N") Installed version lower than 3.1.1 >> $INSTALL_LOGFILE
    if [ -e ${ADDON_DIR}/node_modules/@ungap ]; then
      rm -r ${ADDON_DIR}/node_modules/@ungap
    fi
    if [ -e ${ADDON_DIR}/www/logfileAddonErrDownload.cgi ]; then
      rm -f ${ADDON_DIR}/www/logfileAddonErrDownload.cgi
    fi
    if [ -e ${ADDON_DIR}/www/logfileAddonErrEmpty.cgi ]; then
      rm -f ${ADDON_DIR}/www/logfileAddonErrEmpty.cgi
    fi
    if [ -e ${ADDON_DIR}/www/logfileAddonErrGetContent.cgi ]; then
      rm -f ${ADDON_DIR}/www/logfileAddonErrGetContent.cgi
    fi
    if [ -e ${ADDON_DIR}/www/logfileAddonLogDownload.cgi ]; then
      rm -f ${ADDON_DIR}/www/logfileAddonLogDownload.cgi
    fi
    if [ -e ${ADDON_DIR}/www/logfileAddonLogEmpty.cgi ]; then
      rm -f ${ADDON_DIR}/www/logfileAddonLogEmpty.cgi
    fi
    if [ -e ${ADDON_DIR}/www/logfileAddonLogGetContent.cgi ]; then
      rm -f ${ADDON_DIR}/www/logfileAddonLogGetContent.cgi
    fi
    if [ -e ${ADDON_DIR}/www/logfileClientDownload.cgi ]; then
      rm -f ${ADDON_DIR}/www/logfileClientDownload.cgi
    fi
    if [ -e ${ADDON_DIR}/www/logfileClientEmpty.cgi ]; then
      rm -f ${ADDON_DIR}/www/logfileClientEmpty.cgi
    fi
    if [ -e ${ADDON_DIR}/www/logfileClientGetContent.cgi ]; then
      rm -f ${ADDON_DIR}/www/logfileClientGetContent.cgi
    fi
    if [ -e ${ADDON_DIR}/eufySecurityApi/utils/logging.js ]; then
      rm -f ${ADDON_DIR}/eufySecurityApi/utils/logging.js
    fi
  else
    echo $(date +"%Y-%m-%d %H:%M:%S.%3N") Installed version is 3.1.1 or newer >> $INSTALL_LOGFILE
  fi
  # remove unused api files from versions lower than 3.2.2 
  if [ $CURRENT_VERSION_MAIN -lt 3 ] || ([ $CURRENT_VERSION_MAIN -eq 3 ] && [ $CURRENT_VERSION_MINOR -lt 2 ]) || ([ $CURRENT_VERSION_MAIN -eq 3 ] && [ $CURRENT_VERSION_MINOR -eq 2 ] && [ $CURRENT_VERSION_BUILD -lt 2 ]); then
    echo $(date +"%Y-%m-%d %H:%M:%S.%3N") Installed version lower than 3.2.2 >> $INSTALL_LOGFILE
    if [ -e ${ADDON_DIR}/bin/node ]; then
      rm -r ${ADDON_DIR}/bin/node
    fi
    if [ -e ${ADDON_DIR}/bin/LICENSE ]; then
      rm -f ${ADDON_DIR}/bin/LICENSE
    fi
  else
    echo $(date +"%Y-%m-%d %H:%M:%S.%3N") Installed version is 3.2.2 or newer >> $INSTALL_LOGFILE
  fi
fi

# check current and new Node.js versions
PACKAGE_NODEJS_VERSION=$(eufySecurity/bin/nodejs/bin/node -v)
if [ -e ${ADDON_DIR}/bin/nodejs/bin/node ]; then
  CURRENT_NODEJS_VERSION=$(${ADDON_DIR}/bin/nodejs/bin/node -v)
else
  CURRENT_NODEJS_VERSION=$PACKAGE_NODEJS_VERSION
fi
echo $(date +"%Y-%m-%d %H:%M:%S.%3N") Node.js version installed: $CURRENT_NODEJS_VERSION >> $INSTALL_LOGFILE
echo $(date +"%Y-%m-%d %H:%M:%S.%3N") Node.js version to install: $PACKAGE_NODEJS_VERSION >> $INSTALL_LOGFILE
if [ $CURRENT_NODEJS_VERSION != $PACKAGE_NODEJS_VERSION ]; then
  echo $(date +"%Y-%m-%d %H:%M:%S.%3N") Preparing Node.js install folder for new Node.js version... >> $INSTALL_LOGFILE
  if [ -e ${ADDON_DIR}/bin/nodejs/include ]; then
    rm -r ${ADDON_DIR}/bin/nodejs/include
  fi
  if [ -e ${ADDON_DIR}/bin/nodejs/lib ]; then
    rm -r ${ADDON_DIR}/bin/nodejs/lib
  fi
  if [ -e ${ADDON_DIR}/bin/nodejs/share ]; then
    rm -r ${ADDON_DIR}/bin/nodejs/share
  fi
  echo $(date +"%Y-%m-%d %H:%M:%S.%3N") ...done >> $INSTALL_LOGFILE
else
  echo $(date +"%Y-%m-%d %H:%M:%S.%3N") Node.js install folder is up to date >> $INSTALL_LOGFILE
fi

# create necessary directories
echo $(date +"%Y-%m-%d %H:%M:%S.%3N") Create directories... >> $INSTALL_LOGFILE
mkdir -p ${ADDON_DIR}
chmod 755 ${ADDON_DIR}
mkdir -p ${RCD_DIR}
chmod 755 ${RCD_DIR}
echo $(date +"%Y-%m-%d %H:%M:%S.%3N") ...done >> $INSTALL_LOGFILE

# copy addon files
echo $(date +"%Y-%m-%d %H:%M:%S.%3N") Copy addon files... >> $INSTALL_LOGFILE
cp -af eufySecurity/* ${ADDON_DIR}/
cp -af eufySecurity-addon.cfg ${ADDON_DIR}/
cp -af VERSION ${ADDON_DIR}/
echo $(date +"%Y-%m-%d %H:%M:%S.%3N") ...done >> $INSTALL_LOGFILE

# make node executable
echo $(date +"%Y-%m-%d %H:%M:%S.%3N") Make node executable... >> $INSTALL_LOGFILE
chmod 755 ${ADDON_DIR}/bin/nodejs/bin/node
echo $(date +"%Y-%m-%d %H:%M:%S.%3N") ...done >> $INSTALL_LOGFILE

# change directory
cd ${ADDON_DIR}

# check if nodes_modes exits
echo $(date +"%Y-%m-%d %H:%M:%S.%3N") Determine to install or update modules >> $INSTALL_LOGFILE
if [ -d ${ADDON_DIR}/node_modules ]; then
  # update modules
  echo $(date +"%Y-%m-%d %H:%M:%S.%3N") Update modules by npm... >> $INSTALL_LOGFILE
  bin/nodejs/bin/npm update --omit=dev >> $INSTALL_LOGFILE
  echo $(date +"%Y-%m-%d %H:%M:%S.%3N") ...done >> $INSTALL_LOGFILE
else
  # install modules
  echo $(date +"%Y-%m-%d %H:%M:%S.%3N") Install modules by npm... >> $INSTALL_LOGFILE
  bin/nodejs/bin/npm install --omit=dev >> $INSTALL_LOGFILE
  echo $(date +"%Y-%m-%d %H:%M:%S.%3N") ...done... >> $INSTALL_LOGFILE
fi

# change directory
cd ${SETUP_DIR}

# exclude some directories from backup (user will NEED to reinstall addon after restore)
echo $(date +"%Y-%m-%d %H:%M:%S.%3N") Exclude directories from backup... >> $INSTALL_LOGFILE
touch ${ADDON_DIR}/bin/.nobackup
touch ${ADDON_DIR}/node_modules/.nobackup
echo $(date +"%Y-%m-%d %H:%M:%S.%3N") ...done >> $INSTALL_LOGFILE

# copy startup script
echo $(date +"%Y-%m-%d %H:%M:%S.%3N") Copy startup script... >> $INSTALL_LOGFILE
cp -af rc.d/* ${RCD_DIR}
chmod 755 ${RCD_DIR}/eufySecurity
echo $(date +"%Y-%m-%d %H:%M:%S.%3N") ...done >> $INSTALL_LOGFILE

# create www link
echo $(date +"%Y-%m-%d %H:%M:%S.%3N") Create website link... >> $INSTALL_LOGFILE
if [ ! -e ${WWW_DIR} ]; then
  ln -sf ${ADDON_DIR}/www ${WWW_DIR}
fi
echo $(date +"%Y-%m-%d %H:%M:%S.%3N") ...done >> $INSTALL_LOGFILE

sync

# exit with 0 to signal install succeeded if device is raspberrymatic then no reboot is requiered 
# and so we have delete the logfiles and than start the service the original ccu will reboot by default
if [ "$1" = "HM-RASPBERRYMATIC" ]; then
  if [ -e /var/log/eufySecurity.err ]; then
    echo $(date +"%Y-%m-%d %H:%M:%S.%3N") Remove eufySecurity.err >> $INSTALL_LOGFILE
    rm -f /var/log/eufySecurity.err
  fi
  if [ -e /var/log/eufySecurity.log ]; then
    echo $(date +"%Y-%m-%d %H:%M:%S.%3N") Remove eufySecurity.log >> $INSTALL_LOGFILE
    rm -f /var/log/eufySecurity.log
  fi
  if [ -e /var/log/eufySecurityClient.log ]; then
    echo $(date +"%Y-%m-%d %H:%M:%S.%3N") Remove eufySecurityClient.log >> $INSTALL_LOGFILE
    rm -f /var/log/eufySecurityClient.log
  fi
  echo $(date +"%Y-%m-%d %H:%M:%S.%3N") Starting service... >> $INSTALL_LOGFILE
  ${RCD_DIR}/eufySecurity start
fi
echo $(date +"%Y-%m-%d %H:%M:%S.%3N") Installation done >> $INSTALL_LOGFILE
mv $INSTALL_LOGFILE ${ADDON_DIR}/install.log
exit 0